
# We run this file with: docker-compose up. Note, that if you want to force a rebuild of everything, you can use: docker-compose up --build.

version: '3'
services:
  # The postgres container.
  postgres:
    image: 'postgres:latest'
  # Nginx container. This routes traffic to react or express server (we use routing to urls instead of trying to juggle ports).
  nginx:
    restart: always
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    ports:
      - '3050:80'
  # The redis container.
  redis:
    image: 'redis:latest'
  # We build the Express server container using Dockerfile.dev in the server folder and all other files in that folder.
  api:
    build:
      dockerfile: Dockerfile.dev
      context: ./server
    # We set up the volume for this container but ignore the node_modules folder.
    volumes:
      - /app/node_modules
      - ./server:/app
    # The below environment variables are created when the image is run to create the container. Look at Docker Hub documentation for default values to input below (we use only the default values).
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PGUSER=postgres
      - PGHOST=postgres
      - PGDATABASE=postgres
      - PGPASSWORD=postgres_password
      - PGPORT=5432
  # Client service.
  client:
    build:
      dockerfile: Dockerfile.dev
      context: ./client
    volumes:
      - /app/node_modules
      - ./client:/app
  # Worker service.
  worker:
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    build:
      dockerfile: Dockerfile.dev
      context: ./worker
    volumes:
      - /app/node_modules
      - ./worker:/app








